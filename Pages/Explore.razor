@page "/explore"
@inject IJSRuntime JSRuntime

<div class="flex flex-col items-center h-screen bg-gray-100 p-4">
    @if (profiles != null && profiles.Any())
    {
        <div class="w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var profile in profiles)
            {
                <div class="relative w-full h-64 bg-cover bg-center rounded-xl overflow-hidden shadow-lg"
                    style="background-image: url('@profile.ImageUrl');">
                    <div class="w-full h-full flex flex-col justify-end bg-gradient-to-t from-black via-transparent to-transparent p-4">
                        <div class="text-white">
                            <p class="text-2xl md:text-3xl font-extrabold">@profile.Name</p>
                            <p class="text-lg md:text-xl">@profile.Age years old</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-gray-500 text-2xl">No profiles available.</p>
    }
</div>








@code {
    private ElementReference profileElement;
    private List<Profile> profiles = new List<Profile>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProfiles();
    }

    private async Task LoadProfiles()
    {
        profiles = new List<Profile>
        {
            new Profile { Id = 1, Name = "Alice", Age = 25, ImageUrl = "https://th.bing.com/th/id/OIP.eRbZWZVfq2KIdKH-bw0mSQHaJS?rs=1&pid=ImgDetMain" },
            new Profile { Id = 2, Name = "Bob", Age = 30, ImageUrl = "https://th.bing.com/th/id/OIP.eRbZWZVfq2KIdKH-bw0mSQHaJS?rs=1&pid=ImgDetMain" },
            new Profile { Id = 3, Name = "Charlie", Age = 28, ImageUrl = "https://th.bing.com/th/id/OIP.eRbZWZVfq2KIdKH-bw0mSQHaJS?rs=1&pid=ImgDetMain" },
            new Profile { Id = 4, Name = "Diana", Age = 22, ImageUrl = "https://th.bing.com/th/id/OIP.eRbZWZVfq2KIdKH-bw0mSQHaJS?rs=1&pid=ImgDetMain" }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await JSRuntime.InvokeVoidAsync("addSwipeListener", "profileElementId", DotNetObjectReference.Create(this));
    }
}


    public async Task SwipeRight()
    {
        // Process right swipe
        UpdateProfile();
    }

    public async Task SwipeLeft()
    {
        // Process left swipe
        UpdateProfile();
    }

    private void UpdateProfile()
    {
        if (profiles.Count > 1)
        {
            profiles.RemoveAt(0); // Remove the top profile
            InvokeAsync(StateHasChanged); // Update UI
        }
    }

    public class Profile
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public string ImageUrl { get; set; }
    }
}
