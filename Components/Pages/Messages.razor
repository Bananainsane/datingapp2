@page "/messages/{userId:int}"
@inject DatingApp.Data.DatingContext DB
@inject DatingApp.Services.UserService UserService
@using DatingApp.Models
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics

<h1 class="text-2xl font-bold text-center">Messages</h1>

@if (UserService.IsLoggedIn)
{
    <div class="p-4">
        <h2 class="text-xl font-bold mb-4">Chat with @selectedUserName</h2>
        <div class="border border-gray-300 p-4 rounded mb-4">
            @if (messages.Any())
            {
                @foreach (var message in messages)
                {
                    <div class="mb-2">
                        <strong>@(message.SenderId == UserService.Id ? "Me" : selectedUserName):</strong>
                        <p>@message.Msg</p>
                        <small class="text-gray-500">@message.Timestamp</small>
                    </div>
                }
            }
            else
            {
                <p>No messages yet!</p>
            }
        </div>

        <div class="mt-4">
            <input @bind="newMessage" placeholder="Type your message..." class="border border-gray-300 p-2 rounded w-full" />
            <button @onclick="HandleButtonClick" class="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Send</button>
        </div>
    </div>
}
else
{
    <p>Please <a href="/login">login</a> to view and send messages.</p>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private List<Message> messages = new List<Message>();
    private string newMessage = string.Empty;
    private string selectedUserName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine("OnInitializedAsync started");

        if (UserService.IsLoggedIn)
        {
            var currentUserId = UserService.Id;
            Debug.WriteLine($"Current User ID: {currentUserId}");

            try
            {
                var selectedUser = await DB.Users.FindAsync(userId);
                selectedUserName = selectedUser?.FirstName + " " + selectedUser?.LastName ?? "Unknown User";
                Debug.WriteLine($"Selected User Name: {selectedUserName}");

                var likedEachOther = await DB.Likes.AnyAsync(l => l.LikerId == userId && l.LikeeId == currentUserId && l.Status == 1) &&
                                     await DB.Likes.AnyAsync(l => l.LikerId == currentUserId && l.LikeeId == userId && l.Status == 1);
                Debug.WriteLine($"Liked each other: {likedEachOther}");

                if (likedEachOther)
                {
                    messages = await DB.Messages
                                       .Where(m => (m.SenderId == userId && m.ReceiverId == currentUserId) ||
                                                   (m.SenderId == currentUserId && m.ReceiverId == userId))
                                       .OrderBy(m => m.Timestamp)
                                       .ToListAsync();
                    Debug.WriteLine($"Loaded {messages.Count} messages.");
                }
                else
                {
                    Debug.WriteLine("You do not have permission to message this user.");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"An error occurred while initializing: {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine("User is not logged in.");
        }
    }

    private void HandleButtonClick()
    {
        Debug.WriteLine("HandleButtonClick called");
        SendMessage().GetAwaiter().GetResult();
    }

    private async Task SendMessage()
    {
        Debug.WriteLine("SendMessage called");

        if (string.IsNullOrWhiteSpace(newMessage))
        {
            Debug.WriteLine("New message is empty or whitespace.");
            return;
        }

        try
        {
            var message = new Message
            {
                SenderId = UserService.Id,
                ReceiverId = userId,
                Msg = newMessage,
                Timestamp = DateTime.Now
            };

            Debug.WriteLine($"Creating message: SenderId={message.SenderId}, ReceiverId={message.ReceiverId}, Msg={message.Msg}, Timestamp={message.Timestamp}");

            DB.Messages.Add(message);
            Debug.WriteLine("Message added to DbSet.");

            var saveResult = await DB.SaveChangesAsync();
            Debug.WriteLine($"SaveChangesAsync result: {saveResult}");

            if (saveResult > 0)
            {
                Debug.WriteLine("Message successfully saved to the database.");

                messages.Add(message);
                newMessage = string.Empty;
                Debug.WriteLine("Message added to local list and UI refreshed.");

                StateHasChanged(); // Refresh the UI
            }
            else
            {
                Debug.WriteLine("SaveChangesAsync did not affect any rows.");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"An error occurred while sending message: {ex.Message}");
        }
    }
}
