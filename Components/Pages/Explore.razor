@page "/explore/{userId:int}"
@inject DatingApp.Data.DatingContext DB
@inject IJSRuntime JSRuntime
@inject DatingApp.Services.UserService UserService
@using DatingApp.Model.Enums
@using DatingApp.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq
@rendermode InteractiveServer

@if (!UserService.IsLoggedIn)
{
    <div>Please <a href="/login">login</a> to view other user profiles.</div>
}
else if (currentProfile != null)
{
    <div class="container mx-auto p-4">
    <div class="flex justify-center mb-4">
        <h1 class="text-3xl font-bold">Dating Explorer</h1>
    </div>

    <div class="w-full max-w-lg mx-auto bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-4 bg-cover bg-center h-64" style="background-image: url('@currentProfile.ImageUrl');">
        </div>
        <div class="p-4">
            <h5 class="text-xl font-bold mb-2">@currentProfile.UserName</h5>
            <dl class="mb-4">
                <dt class="font-semibold">Birth Date:</dt>
                <dd>@FormatBirthDate(currentProfile.BirthDate)</dd>
                <dt class="font-semibold">Height:</dt>
                <dd>@currentProfile.Height cm</dd>
                <dt class="font-semibold">About Me:</dt>
                <dd>@currentProfile.AboutMe</dd>
                <dt class="font-semibold">Gender:</dt>
                <dd>@currentProfile.Gender</dd>
                <dt class="font-semibold">City:</dt>
                <dd>@currentProfile.CityName</dd>
                <dt class="font-semibold">Hobbies:</dt>
                <dd>@currentProfile.Hobbies</dd>
            </dl>
        </div>
        <div class="p-4 bg-gray-100 flex justify-end">
            <button
                class="transition duration-300 ease-in-out text-white font-bold py-2 px-4 rounded-full cursor-pointer
                            @(LikedStatus.ContainsKey(currentProfile.UserId) && LikedStatus[currentProfile.UserId] ? "bg-green-500 hover:bg-green-700" : "bg-blue-500 hover:bg-blue-700")"
                @onclick="LikeUser">
                <i class="fa fa-heart"></i> @(LikedStatus.ContainsKey(currentProfile.UserId) &&
                LikedStatus[currentProfile.UserId] ? "Liked" : "Like")
                </button>
            </div>
        </div>
    </div>
}
else
{
    <p class="text-gray-600 text-2xl">No profiles available.</p>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private List<UserProfile> UserProfiles { get; set; } = new List<UserProfile>();
    private Dictionary<int, bool> LikedStatus = new Dictionary<int, bool>();
    private UserProfile currentProfile;
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            UserProfiles = await DB.UserProfiles.Where(u => u.UserId != userId).ToListAsync();

            foreach (var profile in UserProfiles)
            {
                var isLiked = await DB.Likes.AnyAsync(l => l.LikerId == UserService.Id && l.LikeeId == profile.UserId && l.Status == 1);
                LikedStatus[profile.UserId] = isLiked;
            }
            SetRandomProfile();
        }
    }

    private async Task LikeUser()
    {
        if (!UserService.IsLoggedIn || currentProfile == null)
        {
            return;
        }

        // Validate the current profile ID exists in the UserProfiles table
        var likeeExists = await DB.UserProfiles.AnyAsync(u => u.UserId == currentProfile.UserId);
        if (!likeeExists)
        {
            Console.WriteLine($"User with ID {currentProfile.UserId} does not exist in UserProfiles table");
            return;
        }

        var existingLike = await DB.Likes.FirstOrDefaultAsync(l => l.LikerId == UserService.Id && l.LikeeId ==
        currentProfile.UserId);

        if (existingLike == null)
        {
            var newLike = new Like
                {
                    LikerId = UserService.Id,
                    LikeeId = currentProfile.UserId,
                    Status = 1 // Liked
                };
            DB.Likes.Add(newLike);
            LikedStatus[currentProfile.UserId] = true;
        }
        else
        {
            existingLike.Status = existingLike.Status == 0 ? 1 : 0;
            LikedStatus[currentProfile.UserId] = existingLike.Status == 1;
        }

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to database: {ex.Message}");
        }

        StateHasChanged();
        UpdateProfile();
    }


    private void UpdateProfile()
    {
        if (UserProfiles.Count > 1)
        {
            UserProfiles.Remove(currentProfile);
            SetRandomProfile();
        }
        else
        {
            currentProfile = null;
        }
    }

    private void SetRandomProfile()
    {
        if (UserProfiles.Any())
        {
            int index = random.Next(UserProfiles.Count);
            currentProfile = UserProfiles[index];
        }
        else
        {
            currentProfile = null;
        }
    }

    private string FormatBirthDate(DateTime? birthDate)
    {
        return birthDate.HasValue ? birthDate.Value.ToString("MMMM dd, yyyy") : "Unknown";
    }
}
