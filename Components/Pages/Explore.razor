@page "/explore/{userId:int}"
@inject DatingApp.Data.DatingContext DB
@inject IJSRuntime JSRuntime
@inject DatingApp.Services.UserService UserService
@using DatingApp.Model.Enums
@using DatingApp.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq
@rendermode InteractiveServer

@if (!UserService.IsLoggedIn)
{
    <div class="flex justify-center items-center min-h-screen bg-gray-100">
        <div class="bg-white p-6 rounded-lg shadow-md text-center">
            <p>Please <a href="/signin" class="text-blue-500 hover:underline">login</a> to view other user profiles.</p>
        </div>
    </div>
}
else if (currentProfile != null)
{
    <div class="container mx-auto p-4">
        <div class="flex justify-center mb-4">
            <h1 class="text-4xl font-bold text-gray-800">Dating Explorer</h1>
        </div>

        <div class="w-full max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden">
            <div @ref="profileCard" class="animate__animated @animationClass">
                <div class="relative">
                    <div class="absolute inset-0 bg-black opacity-50 rounded-t-lg"></div>
                    <div class="p-4 bg-cover bg-center h-64 rounded-t-lg" style="background-image: url('@currentProfile.ImageUrl');">
                    </div>
                </div>
                <div class="p-4">
                    <h5 class="text-2xl font-bold mb-2 text-gray-800">@currentProfile.UserName</h5>
                    <dl class="mb-4">
                        <dt class="font-semibold text-gray-600">Birth Date:</dt>
                        <dd class="mb-2">@FormatBirthDate(currentProfile.BirthDate)</dd>
                        <dt class="font-semibold text-gray-600">Height:</dt>
                        <dd class="mb-2">@currentProfile.Height cm</dd>
                        <dt class="font-semibold text-gray-600">About Me:</dt>
                        <dd class="mb-2">@currentProfile.AboutMe</dd>
                        <dt class="font-semibold text-gray-600">Gender:</dt>
                        <dd class="mb-2">@currentProfile.Gender</dd>
                        <dt class="font-semibold text-gray-600">City:</dt>
                        <dd class="mb-2">@currentProfile.CityName</dd>
                        <dt class="font-semibold text-gray-600">Hobbies:</dt>
                        <dd class="mb-2">@currentProfile.Hobbies</dd>
                    </dl>
                </div>
                <div class="p-4 bg-gray-100 flex justify-around">
                    <button
                        class="transition duration-300 ease-in-out text-white font-bold py-2 px-4 rounded-full cursor-pointer bg-red-500 hover:bg-red-700"
                        @onclick="() => LikeDislikeUser(false)">
                        <i class="fa fa-times mr-2"></i> Dislike
                    </button>
                    <button
                        class="transition duration-300 ease-in-out text-white font-bold py-2 px-4 rounded-full cursor-pointer @(LikedStatus.ContainsKey(currentProfile.UserId) && LikedStatus[currentProfile.UserId] ? "bg-green-500 hover:bg-green-700" : "bg-blue-500 hover:bg-blue-700")"
                        @onclick="() => LikeDislikeUser(true)">
                        <i class="fa fa-heart mr-2"></i> @(LikedStatus.ContainsKey(currentProfile.UserId) && LikedStatus[currentProfile.UserId] ? "Liked" : "Like")
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex justify-center items-center min-h-screen bg-gray-100">
        <p class="text-gray-600 text-2xl">No profiles available.</p>
    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private List<UserProfile> UserProfiles { get; set; } = new List<UserProfile>();
    private Dictionary<int, bool> LikedStatus = new Dictionary<int, bool>();
    private UserProfile currentProfile;
    private ElementReference profileCard;
    private string animationClass = "animate__fadeIn";
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            UserProfiles = await DB.UserProfiles
                .Where(u => u.UserId != userId &&
                            !DB.Likes.Any(l => l.LikerId == UserService.Id && l.LikeeId == u.UserId))
                .ToListAsync();

            foreach (var profile in UserProfiles)
            {
                var isLiked = await DB.Likes.AnyAsync(l => l.LikerId == UserService.Id && l.LikeeId == profile.UserId && l.Status == 1);
                LikedStatus[profile.UserId] = isLiked;
            }
            SetRandomProfile();
        }
    }

    private async Task LikeDislikeUser(bool like)
    {
        if (!UserService.IsLoggedIn || currentProfile == null)
        {
            return;
        }

        var likeeExists = await DB.UserProfiles.AnyAsync(u => u.UserId == currentProfile.UserId);
        if (!likeeExists)
        {
            Console.WriteLine($"User with ID {currentProfile.UserId} does not exist in UserProfiles table");
            return;
        }

        var existingLike = await DB.Likes.FirstOrDefaultAsync(l => l.LikerId == UserService.Id && l.LikeeId == currentProfile.UserId);

        if (existingLike == null)
        {
            var newLike = new Like
            {
                LikerId = UserService.Id,
                LikeeId = currentProfile.UserId,
                Status = like ? 1 : 0
            };
            DB.Likes.Add(newLike);
            LikedStatus[currentProfile.UserId] = like;
        }
        else
        {
            existingLike.Status = like ? 1 : 0;
            LikedStatus[currentProfile.UserId] = like;
        }

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to database: {ex.Message}");
        }

        await AnimateAndChangeProfile(like);
    }

    private async Task AnimateAndChangeProfile(bool like)
    {
        animationClass = like ? "animate__fadeOutRight" : "animate__fadeOutLeft";
        StateHasChanged();
        await Task.Delay(1000);

        UpdateProfile();

        animationClass = "animate__fadeIn";
        StateHasChanged();
    }

    private void UpdateProfile()
    {
        if (UserProfiles.Count > 1)
        {
            UserProfiles.Remove(currentProfile);
            SetRandomProfile();
        }
        else
        {
            currentProfile = null;
        }
    }

    private void SetRandomProfile()
    {
        if (UserProfiles.Any())
        {
            int index = random.Next(UserProfiles.Count);
            currentProfile = UserProfiles[index];
        }
        else
        {
            currentProfile = null;
        }
    }

    private string FormatBirthDate(DateTime? birthDate)
    {
        return birthDate.HasValue ? birthDate.Value.ToString("MMMM dd, yyyy") : "Unknown";
    }
}
