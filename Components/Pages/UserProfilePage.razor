@page "/profile/{userId:int}"
@inject NavigationManager NavigationManager
@inject DatingApp.Data.DatingContext DB
@inject DatingApp.Services.UserService UserService
@using DatingApp.Models
@using DatingApp.Model.Enums
@using System.Linq
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<div class="min-h-screen bg-gray-100 flex items-center justify-center">
    @if (!UserService.IsLoggedIn)
    {
        <div class="text-center bg-white p-6 rounded shadow-lg">
            <p>Please <a href="/signin" class="text-indigo-600 hover:text-indigo-900">login</a> to access your profile.</p>
        </div>
    }
    else if (profile != null)
    {
        <div class="w-full max-w-4xl bg-white p-8 rounded-lg shadow-lg">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center">
                    @if (!string.IsNullOrEmpty(profile.ImageUrl))
                    {
                        <img src="data:image/jpeg;base64,@profile.ImageUrl" alt="Profile Image" class="w-24 h-24 rounded-full shadow-md">
                    }
                    else
                    {
                        <i class="fas fa-user-circle text-4xl text-indigo-600"></i>
                    }
                    <h2 class="text-2xl font-bold ml-4">@UserService.FirstName @UserService.LastName</h2>
                </div>
                <div class="space-x-2">
                    <button
                        class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        @onclick="EditProfile">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner">
                        <h3 class="font-semibold">Username</h3>
                        <p>@profile.UserName</p>
                    </div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">Birth Date</h3>
                        <p>@FormatBirthDate(profile.BirthDate)</p>
                    </div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">Age</h3>
                        <p>@Age(profile.BirthDate)</p>
                    </div>
                </div>
                <div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner">
                        <h3 class="font-semibold">Height</h3>
                        <p>@profile.Height cm</p>
                    </div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">Gender</h3>
                        <p>@profile.Gender</p>
                    </div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">City</h3>
                        <p>@profile.CityName</p>
                    </div>
                </div>
                <div class="md:col-span-2">
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">About Me</h3>
                        <p>@profile.AboutMe</p>
                    </div>
                    <div class="bg-gray-100 p-4 rounded-lg shadow-inner mt-4">
                        <h3 class="font-semibold">Hobbies</h3>
                        <p>@profile.Hobbies</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <p class="text-gray-600">Loading profile...</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public int userId { get; set; }

    private UserProfile? profile;

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            profile = await DB.UserProfiles.FirstOrDefaultAsync(u => u.UserId == userId);
        }
        else
        {
            NavigationManager.NavigateTo("/signin");
        }
    }

    private void EditProfile()
    {
        NavigationManager.NavigateTo($"/UserProfileSetup/{userId}", true);
    }

    private string FormatBirthDate(DateTime? birthDate)
    {
        return birthDate.HasValue ? birthDate.Value.ToString("MMMM dd, yyyy") : "Unknown";
    }

    private int Age(DateTime? birthDate)
    {
        if (birthDate.HasValue)
        {
            var today = DateTime.Today;
            var age = today.Year - birthDate.Value.Year;
            if (birthDate.Value.Date > today.AddYears(-age)) age--;
            return age;
        }
        return 0;
    }
}
