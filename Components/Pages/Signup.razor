@page "/users/signup"
@inject DatingApp.Data.DatingContext DB
@using DatingApp.Models
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks;

<PageTitle>Sign Up</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="w-full max-w-md bg-white p-8 rounded-lg shadow-lg">
        <h2 class="text-2xl font-bold mb-4 text-center">Sign Up</h2>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline">@successMessage <a href="/Signin" class="text-indigo-600 hover:text-indigo-900 font-bold">Go to Sign In</a></span>
            </div>
        }
        <EditForm Model="@User" OnValidSubmit="@AddUser" class="space-y-4" FormName="signupForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" />
            
            <div>
                <label for="firstname" class="block text-sm font-medium text-gray-700">First Name</label>
                <InputText id="firstname" @bind-Value="User.FirstName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.FirstName" class="text-red-500 text-sm" />
            </div>

            <div>
                <label for="lastname" class="block text-sm font-medium text-gray-700">Last Name</label>
                <InputText id="lastname" @bind-Value="User.LastName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.LastName" class="text-red-500 text-sm" />
            </div>

            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <InputText id="email" @bind-Value="User.Email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.Email" class="text-red-500 text-sm" />
            </div>

            <div>
                <label for="login" class="block text-sm font-medium text-gray-700">Login</label>
                <InputText id="login" @bind-Value="User.Login" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.Login" class="text-red-500 text-sm" />
            </div>

            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <InputText id="password" @bind-Value="User.Password" type="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.Password" class="text-red-500 text-sm" />
            </div>

            <div>
                <label for="password2" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                <InputText id="password2" @bind-Value="User.Password2" type="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
                <ValidationMessage For="() => User.Password2" class="text-red-500 text-sm" />
            </div>

            <div>
                <button type="submit" class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Create
                </button>
            </div>
        </EditForm>
        <div class="mt-4 text-center">
            <a href="/Signin" class="text-indigo-600 hover:text-indigo-900">Already have an account? Sign in</a>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public User User { get; set; } = new();
    private string successMessage;

    public async Task AddUser()
    {
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(User);

        if (!Validator.TryValidateObject(User, context, validationResults, true))
        {
            foreach (var validationResult in validationResults)
            {
                Console.WriteLine(validationResult.ErrorMessage);
            }
            return; // Stop execution and handle the validation failure
        }

        try
        {
            Console.WriteLine("Adding user...");
            DB.Users.Add(User);
            await DB.SaveChangesAsync();

            // Create a corresponding UserProfile with default values
            var userProfile = new UserProfile
            {
                UserName = User.Login,
                BirthDate = DateTime.Now.AddYears(-20), // Default birthdate 20 years ago
                Height = 170, // Default height
                AboutMe = "About Me text here", // Default about me text
                Gender = Model.Enums.Gender.Other, // Default gender (Other)
                UserId = User.Id, // Link to the created user
                CityName = "CityName", // Default city name
                Hobbies = "Hobbies", // Default hobbies
                ImageUrl = "ImageUrl" // Default image URL
            };
            DB.UserProfiles.Add(userProfile);
            await DB.SaveChangesAsync();

            Console.WriteLine("User and UserProfile added.");
            successMessage = "User created successfully! Please proceed to sign in.";
            StateHasChanged(); // Update the UI with the success message
        }
        catch (DbUpdateException dbEx)
        {
            Console.WriteLine("Database update exception: " + dbEx.InnerException?.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("General error adding user: " + ex.Message);
            if (ex.InnerException != null)
            {
                Console.WriteLine("Inner exception: " + ex.InnerException.Message);
            }
        }
    }
}
